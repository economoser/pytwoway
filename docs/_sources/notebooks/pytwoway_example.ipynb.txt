{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# pytwoway example"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-22T21:42:48.755172Z",
     "start_time": "2020-12-22T21:42:47.334825Z"
    }
   },
   "outputs": [],
   "source": [
    "import os, sys\n",
    "# Navigate to parent folder for import\n",
    "os.chdir('../../..')\n",
    "from pytwoway import sim_twfe_network as sn\n",
    "from pytwoway import twfe_network as tn\n",
    "\n",
    "# Weird code needed for output to show\n",
    "os.chdir('docs-src/source/notebooks')\n",
    "stdout = sys.stdout\n",
    "sys.path.insert(1, os.path.join(sys.path[0], '..'))\n",
    "sys.stdout = stdout"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## First, get your data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-22T21:42:49.104469Z",
     "start_time": "2020-12-22T21:42:48.757459Z"
    }
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>wid</th>\n",
       "      <th>year</th>\n",
       "      <th>k</th>\n",
       "      <th>alpha</th>\n",
       "      <th>psi</th>\n",
       "      <th>spell</th>\n",
       "      <th>freq</th>\n",
       "      <th>fid</th>\n",
       "      <th>move</th>\n",
       "      <th>comp</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>7</td>\n",
       "      <td>0.430727</td>\n",
       "      <td>0.604585</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>138</td>\n",
       "      <td>False</td>\n",
       "      <td>-0.316670</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>0.430727</td>\n",
       "      <td>0.604585</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>138</td>\n",
       "      <td>False</td>\n",
       "      <td>2.537300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>0.430727</td>\n",
       "      <td>0.604585</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>146</td>\n",
       "      <td>True</td>\n",
       "      <td>2.583865</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>1</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>0.430727</td>\n",
       "      <td>0.604585</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>133</td>\n",
       "      <td>True</td>\n",
       "      <td>2.452087</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>0.430727</td>\n",
       "      <td>0.114185</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>91</td>\n",
       "      <td>True</td>\n",
       "      <td>1.314499</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49995</th>\n",
       "      <td>10000</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>0.967422</td>\n",
       "      <td>0.908458</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>165</td>\n",
       "      <td>False</td>\n",
       "      <td>1.599970</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49996</th>\n",
       "      <td>10000</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>0.967422</td>\n",
       "      <td>0.908458</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>155</td>\n",
       "      <td>True</td>\n",
       "      <td>1.630563</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49997</th>\n",
       "      <td>10000</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>0.967422</td>\n",
       "      <td>0.908458</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>155</td>\n",
       "      <td>False</td>\n",
       "      <td>0.334739</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49998</th>\n",
       "      <td>10000</td>\n",
       "      <td>4</td>\n",
       "      <td>9</td>\n",
       "      <td>0.967422</td>\n",
       "      <td>1.335178</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>179</td>\n",
       "      <td>True</td>\n",
       "      <td>2.419748</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>49999</th>\n",
       "      <td>10000</td>\n",
       "      <td>5</td>\n",
       "      <td>8</td>\n",
       "      <td>0.967422</td>\n",
       "      <td>0.908458</td>\n",
       "      <td>4</td>\n",
       "      <td>1</td>\n",
       "      <td>169</td>\n",
       "      <td>True</td>\n",
       "      <td>1.993326</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>50000 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "         wid  year  k     alpha       psi  spell  freq  fid   move      comp\n",
       "0          1     1  7  0.430727  0.604585      1     2  138  False -0.316670\n",
       "1          1     2  7  0.430727  0.604585      1     2  138  False  2.537300\n",
       "2          1     3  7  0.430727  0.604585      2     1  146   True  2.583865\n",
       "3          1     4  7  0.430727  0.604585      3     1  133   True  2.452087\n",
       "4          1     5  5  0.430727  0.114185      4     1   91   True  1.314499\n",
       "...      ...   ... ..       ...       ...    ...   ...  ...    ...       ...\n",
       "49995  10000     1  8  0.967422  0.908458      1     1  165  False  1.599970\n",
       "49996  10000     2  8  0.967422  0.908458      2     2  155   True  1.630563\n",
       "49997  10000     3  8  0.967422  0.908458      2     2  155  False  0.334739\n",
       "49998  10000     4  9  0.967422  1.335178      3     1  179   True  2.419748\n",
       "49999  10000     5  8  0.967422  0.908458      4     1  169   True  1.993326\n",
       "\n",
       "[50000 rows x 10 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# For the example, we simulate data\n",
    "stw_net = sn.SimTwoWay()\n",
    "sim_data = stw_net.sim_network()\n",
    "display(sim_data)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Second, create a twfe_network object using your data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-22T21:42:49.112350Z",
     "start_time": "2020-12-22T21:42:49.108320Z"
    }
   },
   "outputs": [],
   "source": [
    "# We need to specify a column dictionary to make sure columns are named correctly. You can also manually update column names yourself\n",
    "col_dict = {'fid': 'fid', 'wid': 'wid', 'year': 'year', 'comp': 'comp'}\n",
    "tw_net = tn.TwoWay(data=sim_data, col_dict=col_dict) # tw_net for two-way network"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Third, prepare your data for running the FE estimator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-22T21:42:49.296291Z",
     "start_time": "2020-12-22T21:42:49.116284Z"
    }
   },
   "outputs": [],
   "source": [
    "tw_net.prep_fe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Now we can run the FE estimator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-22T21:42:49.482723Z",
     "start_time": "2020-12-22T21:42:49.357210Z"
    }
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "100%|██████████| 5/5 [00:00<00:00, 31.16it/s]\n"
     ]
    }
   ],
   "source": [
    "# Optional parameters\n",
    "fe_params = {'ncore': 1, 'batch': 1, 'ndraw_pii': 50, 'ndraw_tr': 5, 'check': False, 'hetero': False, 'out': 'res_akm.json', 'con': False, 'logfile': '', 'levfile': '', 'statsonly': False}\n",
    "fe_res = tw_net.fit_fe(user_fe=fe_params)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fourth, prepare your data for running the CRE estimator"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-22T21:42:51.138871Z",
     "start_time": "2020-12-22T21:42:49.485380Z"
    }
   },
   "outputs": [],
   "source": [
    "# Optional parameters\n",
    "KMeans_params = {'n_clusters': 10, 'init': 'k-means++', 'n_init': 500, 'max_iter': 300, 'tol': 0.0001, 'precompute_distances': 'deprecated', 'verbose': 0, 'random_state': None, 'copy_x': True, 'n_jobs': 'deprecated', 'algorithm': 'auto'} # These parameters are specifically for the KMeans algorithm\n",
    "cluster_params = {'cdf_resolution': 10, 'grouping': 'quantile_all', 'year': None, 'user_KMeans': KMeans_params}\n",
    "tw_net.prep_cre(user_cluster=cluster_params)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Now we can run CRE"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-22T21:42:51.485812Z",
     "start_time": "2020-12-22T21:42:51.144952Z"
    }
   },
   "outputs": [],
   "source": [
    "# Optional parameters\n",
    "cre_params = {'ncore': 1, 'ndraw_tr': 5, 'ndp': 50, 'out': 'res_cre.json', 'posterior': False, 'wobtw': False}\n",
    "cre_res = tw_net.fit_cre(cre_params)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Finally, we can investigate the results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "ExecuteTime": {
     "end_time": "2020-12-22T21:42:51.498849Z",
     "start_time": "2020-12-22T21:42:51.489723Z"
    },
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "{'cores': '1',\n",
       " 'ndp': '50',\n",
       " 'ndt': '5',\n",
       " 'nm': '19797.0',\n",
       " 'ns': '657',\n",
       " 'n_firms': '196',\n",
       " 'n_workers': '20454',\n",
       " 'n_movers': '19797',\n",
       " 'mover_quantiles': '[161.0, 179.0, 188.0, 194.0, 200.0, 205.0, 210.0, 212.0, 217.0, 225.86945054945056, 246.0]',\n",
       " 'size_quantiles': '[163.0, 183.39019073569483, 192.78025974025974, 197.0, 203.52039312039312, 208.1031175059952, 213.0, 216.0, 220.0, 229.0, 248.0]',\n",
       " 'between_firm_var': '0.9791948500221341',\n",
       " 'var_y': '1.9534475375358358',\n",
       " 'solver_time': '0.028075437000000036',\n",
       " 'tot_var': '1.9584771001512542',\n",
       " 'eps_var_ho': '0.7915537561311395',\n",
       " 'eps_var_fe': '0.38548201852581543',\n",
       " 'tr_var_ho': '0.015167787940336514',\n",
       " 'tr_cov_ho': '-0.008444626700231293',\n",
       " 'var_fe': '0.5921559314545817',\n",
       " 'cov_fe': '0.16352784960412886',\n",
       " 'var_ho': '0.5801498119382077',\n",
       " 'cov_ho': '0.17021222558782226',\n",
       " 'total_time': '0.2863938808441162'}"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "{'ndt': '5',\n",
       " 'nm': '19797',\n",
       " 'ns': '657',\n",
       " 'n_firms': '196',\n",
       " 'n_workers': '10000',\n",
       " 'var_y': '1.9534475375358358',\n",
       " 'y1s_y1s': '-0.01189963890613305',\n",
       " 'y1s_y1s_count': '639',\n",
       " 'y1s_var': '0.4300736238962055',\n",
       " 'y1s_var_count': '657',\n",
       " 'y1m_var': '0.9740000192841033',\n",
       " 'y1m_var_count': '19797',\n",
       " 'y2m_var': '0.9773478869611208',\n",
       " 'y2m_var_count': '19797',\n",
       " 'y1s_y1m1': '-0.0038492794840281654',\n",
       " 'y1s_y1m1_count': '657',\n",
       " 'y1s_y2m1': '-0.0019106341485113634',\n",
       " 'y1s_y2m1_count': '657',\n",
       " 'y1m1_y1m1': '-0.0010446330663667635',\n",
       " 'y1m1_y1m1_count': '19797',\n",
       " 'y2m1_y1m1': '-0.00015778611082538767',\n",
       " 'y2m1_y1m1_count': '19797',\n",
       " 'y2m1_y2m1': '0.0010682926690437032',\n",
       " 'y2m1_y2m1_count': '19797',\n",
       " 'y1s_y1m2': '-5.1502378280613325e-05',\n",
       " 'y1s_y1m2_count': '657',\n",
       " 'y1s_y2m2': '-0.0038982376478934985',\n",
       " 'y1s_y2m2_count': '657',\n",
       " 'y1m2_y1m2': '0.0005614296192659173',\n",
       " 'y1m2_y1m2_count': '19797',\n",
       " 'y2m2_y1m2': '-0.0003095746753201728',\n",
       " 'y2m2_y1m2_count': '19797',\n",
       " 'y2m2_y2m2': '-0.00017511041449799392',\n",
       " 'y2m2_y2m2_count': '19797',\n",
       " 'dym_dym': '1.5869610501253242',\n",
       " 'dym_dym_count': '16423',\n",
       " 'y1m_y2m': '0.18590360817599513',\n",
       " 'y1m_y2m_count': '16423',\n",
       " 'cov_Am1Am1': '0.0010682926690437032',\n",
       " 'cov_Am1Psi1': '-0.001226078779869091',\n",
       " 'var_psi_m1': '0.0003392318243277152',\n",
       " 'cov_Am2Am2': '0.0005614296192659173',\n",
       " 'cov_Am2Psi2': '-0.0008710042945860901',\n",
       " 'var_psi_m2': '0.001005468555408269',\n",
       " 'cov_AsAm1': '-0.0006845553686422724',\n",
       " 'cov_AsAm2': '0.0008195019163054767',\n",
       " 'psi_plus_cov1': '-0.001938645335516802',\n",
       " 'psi_plus_cov2': '-0.0038467352696128854',\n",
       " 'var_psi': '0.0006723501898679921',\n",
       " 'cov_AsPsi1': '-0.00645773079499768',\n",
       " 'cov_AsAs': '0.0003434724939943186',\n",
       " 'var_eps': '1.5856163497455882',\n",
       " 'var_bw': '0.5823280930679625',\n",
       " 'cov_bw': '0.1686971402404331',\n",
       " 'var_wt': '0.0006723501898679921',\n",
       " 'cov_wt': '-0.0013941239237988594',\n",
       " 'tot_var': '0.5830004432578305'}"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "display(fe_res)\n",
    "display(cre_res)"
   ]
  }
 ],
 "metadata": {
  "celltoolbar": "Tags",
  "hide_input": false,
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.9"
  },
  "latex_envs": {
   "LaTeX_envs_menu_present": true,
   "autoclose": false,
   "autocomplete": true,
   "bibliofile": "biblio.bib",
   "cite_by": "apalike",
   "current_citInitial": 1,
   "eqLabelWithNumbers": true,
   "eqNumInitial": 1,
   "hotkeys": {
    "equation": "Ctrl-E",
    "itemize": "Ctrl-I"
   },
   "labels_anchors": false,
   "latex_user_defs": false,
   "report_style_numbering": false,
   "user_envs_cfg": false
  },
  "nbsphinx-toctree": {
   "hidden": true,
   "maxdepth": 1,
   "titlesonly": true
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  },
  "varInspector": {
   "cols": {
    "lenName": 16,
    "lenType": 16,
    "lenVar": 40
   },
   "kernels_config": {
    "python": {
     "delete_cmd_postfix": "",
     "delete_cmd_prefix": "del ",
     "library": "var_list.py",
     "varRefreshCmd": "print(var_dic_list())"
    },
    "r": {
     "delete_cmd_postfix": ") ",
     "delete_cmd_prefix": "rm(",
     "library": "var_list.r",
     "varRefreshCmd": "cat(var_dic_list()) "
    }
   },
   "types_to_exclude": [
    "module",
    "function",
    "builtin_function_or_method",
    "instance",
    "_Feature"
   ],
   "window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
